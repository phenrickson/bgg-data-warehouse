name: Test Refresh Strategy

on:
  workflow_dispatch:  # Allow manual trigger
    inputs:
      environment:
        description: 'Environment to test refresh strategy'
        required: true
        default: 'test_refresh'

jobs:
  test-refresh-strategy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Environment
        run: |
          mkdir -p credentials
          echo '${{ secrets.SERVICE_ACCOUNT_KEY }}' > credentials/service-account-key.json

          cat << EOF > .env
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          ENVIRONMENT=${{ inputs.environment }}
          GOOGLE_APPLICATION_CREDENTIALS=/app/credentials/service-account-key.json
          EOF

      - name: Google Cloud Auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.SERVICE_ACCOUNT_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install UV
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Install Project Dependencies
        run: |
          uv pip install -e .

      - name: Run Refresh Migration Scripts
        run: |
          # Add refresh columns to raw_responses table
          uv run python src/warehouse/migration_scripts/add_refresh_columns.py --environment ${{ inputs.environment }}
          
          # Create monitoring views
          uv run python src/warehouse/create_refresh_monitoring_views.py --environment ${{ inputs.environment }}

      - name: Run Fetch Responses Job
        run: |
          gcloud run jobs execute bgg-fetch-responses \
            --region us-central1 \
            --set-env-vars=ENVIRONMENT=${{ inputs.environment }},PIPELINE_STAGE=fetch_responses \
            --wait

      - name: Run Process Responses Job
        run: |
          gcloud run jobs execute bgg-process-responses \
            --region us-central1 \
            --set-env-vars=ENVIRONMENT=${{ inputs.environment }},PIPELINE_STAGE=process_responses \
            --wait

      - name: Check Monitoring Views
        run: |
          # Query and log monitoring views to verify refresh strategy
          bq query --use_legacy_sql=false \
            'SELECT * FROM `${{ secrets.GCP_PROJECT_ID }}.monitoring.refresh_queue` LIMIT 10'
          
          bq query --use_legacy_sql=false \
            'SELECT * FROM `${{ secrets.GCP_PROJECT_ID }}.monitoring.refresh_activity` LIMIT 10'
          
          bq query --use_legacy_sql=false \
            'SELECT * FROM `${{ secrets.GCP_PROJECT_ID }}.monitoring.games_overdue_for_refresh` LIMIT 10'
